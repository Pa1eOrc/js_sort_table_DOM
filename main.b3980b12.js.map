{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","headers","querySelectorAll","rows","Array","from","tBodies","sortingOrder","length","fill","forEach","header","columnIndex","addEventListener","sort","a","b","aValue","cells","textContent","trim","bValue","localeCompare","undefined","numeric","row","removeChild","appendChild","tHeader","index","classList","toggle","remove"],"mappings":";AAAA,aAEA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAUH,EAAMI,iBAAiB,MACjCC,EAAOC,MAAMC,KAAKP,EAAMQ,QAAQ,GAAGH,MACnCI,EAAeH,MAAMH,EAAQO,QAAQC,KAAK,GAEhDR,EAAQS,QAAQ,SAACC,EAAQC,GACvBD,EAAOE,iBAAiB,QAAS,WAC/BV,EAAKW,KAAK,SAACC,EAAGC,GACNC,IAAAA,EAASF,EAAEG,MAAMN,GAAaO,YAAYC,OAC1CC,EAASL,EAAEE,MAAMN,GAAaO,YAAYC,OAE5Cb,OAA8B,IAA9BA,EAAaK,GACRK,EAAOK,cAAcD,OAAQE,EAAW,CAAEC,SAAS,IAEnDH,EAAOC,cAAcL,OAAQM,EAAW,CAAEC,SAAS,MAI9DrB,EAAKO,QAAQ,SAAAe,GAAO3B,OAAAA,EAAMQ,QAAQ,GAAGoB,YAAYD,KACjDtB,EAAKO,QAAQ,SAAAe,GAAO3B,OAAAA,EAAMQ,QAAQ,GAAGqB,YAAYF,KACjDlB,EAAaK,GAA6C,IAA9BL,EAAaK,GAAqB,EAAI,EAElEX,EAAQS,QAAQ,SAACkB,EAASC,GACpBA,IAAUjB,GACZgB,EAAQE,UAAUC,OAAO,YAA2C,IAA9BxB,EAAaK,IACnDgB,EAAQE,UAAUC,OAAO,aAA4C,IAA9BxB,EAAaK,KAEpDD,EAAOmB,UAAUE,OAAO,YAAa","file":"main.b3980b12.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst headers = table.querySelectorAll('th');\nconst rows = Array.from(table.tBodies[0].rows);\nconst sortingOrder = Array(headers.length).fill(0);\n\nheaders.forEach((header, columnIndex) => {\n  header.addEventListener('click', () => {\n    rows.sort((a, b) => {\n      const aValue = a.cells[columnIndex].textContent.trim();\n      const bValue = b.cells[columnIndex].textContent.trim();\n\n      if (sortingOrder[columnIndex] === 0) {\n        return aValue.localeCompare(bValue, undefined, { numeric: true });\n      } else {\n        return bValue.localeCompare(aValue, undefined, { numeric: true });\n      }\n    });\n\n    rows.forEach(row => table.tBodies[0].removeChild(row));\n    rows.forEach(row => table.tBodies[0].appendChild(row));\n    sortingOrder[columnIndex] = sortingOrder[columnIndex] === 0 ? 1 : 0;\n\n    headers.forEach((tHeader, index) => {\n      if (index === columnIndex) {\n        tHeader.classList.toggle('ascending', sortingOrder[columnIndex] === 0);\n        tHeader.classList.toggle('descending', sortingOrder[columnIndex] === 1);\n      } else {\n        header.classList.remove('ascending', 'descending');\n      }\n    });\n  });\n});\n"]}